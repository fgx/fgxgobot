
>>> Pete's coments to remind himself..

Here's some notes on issues I had with go as a newbie,
and this is with a long background from
php, vb6, python, pyqt, qt/C++, little java

----------------------------------------------------------------
= Workspace and Structure
----------------------------------------------------------------
I Installed Go via
	apt-get install golang
 
So you should get the command "go"
	> go
	
To see the environment with 
	> go env 
	U should see 
		GOROOT="/usr/lib/go" << Thats where it is on my kubuntu

How the difficult part..
U need to setup a workspace, where go source and compiles will got o
> mkdir /path/to/mygo

This is important as you now need to set the GOPATH environment variable
export GOPATH=/path/to/mygo

Within this directory create three folders..
	$GOPATH/bin < this is where binary files will be compiled to
	$GOPATH/pkg < similar suff
	
But most important
	$GOPATH/src < the source
	
The idea is that a "project" exists in a subdirectory of src/
eg
mkdir $GOPATH/src/mytestgo
cd $GOPATH/src/mytestgo
pico main.go < write some code
go run main.go

For external libraries, there's the inbuild "go get" command
and this is a bit like easy_install/pip, cpan for python and perl
eg
> go get github.com/gorilla/mux

will "checkout" the source to
$GOPATH/src/github.com/gorilla/mux/

To use this package in code, import with
import "github.com/gorilla/mux/"

Now the namespace stuff
This project is actually in a directory
	$GOPATH/src/github.com/fgx/fgxgobot
	
And is a "direct git checkout"
But also the namespace for imports ,
	import("github.com/fgx/fgxgobot/radio") 

This project uses atmo...
> go get github.com/gorilla/mux
> go get code.google.com/p/go.net/websocket 	




----------------------------------------------------------------
= Un Exported Packages and functions and variables
----------------------------------------------------------------
This was a pain, any Variables or Functions that DO NOT 
start with a "C"apital, are not exported, 
ie visible outside of the "package"
In a way uNCaptisalised variables and functions are private to the package

eg
package foo

var x int = 1
var Y int = 2

func Foo() string { return "Foo" }

func bar() string {	return "bAR" }

-----
package xyz

import("foo")
myX := foo.x // Fails as "x" is lower case, so not exported
myY := foo.Y // OK we can see that
myF := foo.Foo() //  returns string Foo
myB := foo.boo() // fails as "b" means its not exported


----------------------------------------------------------------
= Constants don't have types
----------------------------------------------------------------
const int Foo = 1 // type not needed
const Foo = 1 //  works
const bAA = 2 // works but not visible outside package
const gString = "pull them down, or your para will fail"


----------------------------------------------------------------
= There are no constructors
----------------------------------------------------------------
type MyStuff struct{
	n int
	Foo string
	bar string
}

Unlike 
  C++ - MyStuff::MyStuff 
  java MyStuff
  pythons def MyStuff.__init__(self)
  or php
  
Instead its recommended u create a NewXXX() function that 
returns and initialises the type to default values
none of them silly null errors in c++ that drive one nuts
but also is sensible on reflection as "maps" althoug declared
need to be initialised, and other things such as channels

eg three flavours of constructor
func NewMyStuff() *MyStuff{
	nu = new(MyStuff)
	nu.n = 10
	nu.bar = "order"
	return nu // NOT .Foo was not set so is ""
}
func NewMyStuff() *MyStuff{
	nu = &MyStuff{Foo: "fuu"}
	return nu // NOT .Foo was not set so is "" and nu is 0
}
func NewMyStuff() *MyStuff{
	return &MyStuff{n: -1}
}


----------------------------------------------------------------
= Global Variables and Singleton
----------------------------------------------------------------
For this app a "SingleTon" patterns was required 
.. kind, for the want of a word

The Main Singleton ie Global is a variable at
xstate.GStateMachine for this app

There were many silly attempts to create the singleton,
and a path biased by c++, and a bit of python issues
There are so many previous "circular references" but indeed was simple maybe

In fact is was solved with main.go creating the instance and done

eg from anywhere
import ("xstate")
curr_flights := xstate.GStateMachine.Flights.GetCount()






